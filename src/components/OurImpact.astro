---
const impactData = [
  {
    value: "35",
    description: "Raised over the years",
    prefix: "<b>$</b>",
    targetValue: 35,
    suffix: "M+"
  },
  {
    value: "30+",
    description: "Years of making",
    targetValue: 30,
    suffix: "+"
  },
  {
    value: "30+",
    description: "Countries impacted",
    targetValue: 30,
    suffix: "+"
  },
  {
    value: "60+",
    description: "Transformative projects",
    targetValue: 60,
    suffix: "+"
  }
];
---

<section class="py-2 z-0 relative" id="impact">
  <div class="relative max-w-7xl mx-auto p-6 sm:p-10">
      <div id="impact-container" class="container mx-auto max-w-5xl relative z-10 p-10 rounded-3xl bg-gray-100/20 backdrop-blur-sm border border-white">
        <h2 class="text-4xl font-bold text-secondary mb-12 text-center relative z-10">
          Our Impact
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 lg:gap-12">
          {impactData.map((item, index) => (
            <div class="impact-card text-center">
               <div class="text-6xl font text-primary mb-2">
                 {item.prefix && <span set:html={item.prefix}></span>}
                 <span class="counter" data-target={item.targetValue} data-suffix={item.suffix}>0{item.suffix}</span>
               </div>
              <p class="impact-description text-lg text-secondary font-medium">{item.description}</p>
            </div>
          ))}
        </div>
      </div>
      <!-- Background decorative elements -->
      <div class="absolute inset-0 z-0 circles-container">
        <div class="circle circle-1 absolute top-1/4 size-14 border-orange-500 rounded-full border-3" style="left: calc(var(--offset) * 1.7);"></div>
        <div class="circle circle-2 absolute top-1/2 -translate-y-1/2 right-0 size-36 border-green/50 rounded-full border-3" style="right: var(--offset);"></div>
        <div class="circle circle-3 absolute bottom-0 size-36 border-secondary rounded-full border-3" style="left: calc(var(--offset) * 1.9);"></div>
      </div>
  </div>
</section>

<style>
  #impact-container {
    filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.1));
  }
  #impact {
    margin-top: -80px;

    @media (min-width: 768px) {
        margin-top: 0;
    }
    .circles-container {
        .circle {
            --offset: -6%;
            @media (width >= 480px) {
                --offset: 0%;
            }
            @media (width >= 640px) {
                --offset: 3%;
            }
            @media (width >= 768px) {
                --offset: 10%;
                scale: 1.1;
            }
            @media (width >= 1024px) {
                --offset: 15%;
                scale: 1.2;
            }
            @media (width >= 1280px) {
                --offset: 20%;
                scale: 1.3;
            }
            @media (width >= 1536px) {
                --offset: 25%;
                scale: 1.4;
            }
        }
    }
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    const impactSection = document.querySelector('#impact');
    const counters = document.querySelectorAll('.counter');
    const circles = document.querySelectorAll('.circle');
    const circlesContainer = document.querySelector('.circles-container');
    const impactCards = document.querySelectorAll('.impact-card');
    const impactDescriptions = document.querySelectorAll('.impact-description');

    // Counter animations
    counters.forEach((counter) => {
      const counterElement = counter as HTMLElement;
      const target = parseInt(counterElement.dataset.target || '0');
      const suffix = counterElement.dataset.suffix || '';

      gsap.fromTo(counter,
        { innerText: 0 },
        {
          innerText: target,
          duration: 3,
          ease: "power3.out",
          snap: { innerText: 1 },
          onUpdate: function() {
            counterElement.innerText = Math.ceil(parseFloat(counterElement.innerText)) + suffix;
          },
          scrollTrigger: {
            trigger: counter,
            start: "top 80%",
            toggleActions: "play none none reverse",
            once: true
          }
        }
      );
    });

    // Impact cards animation with stagger
    gsap.fromTo(impactCards,
      {
        opacity: 0,
        y: 30,
        scale: 0.9
      },
      {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.8,
        ease: "power2.out",
        stagger: 0.2,
        scrollTrigger: {
          trigger: impactCards[0],
          start: "top 85%",
          toggleActions: "play none none reverse",
          once: true
        }
      }
    );

    // Impact descriptions animation with stagger (delayed after cards)
    gsap.fromTo(impactDescriptions,
      {
        opacity: 0,
        y: 20,
        scale: 0.95
      },
      {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.6,
        ease: "power2.out",
        stagger: 0.15,
        delay: 0.3, // Start after cards begin animating
        scrollTrigger: {
          trigger: impactCards[0],
          start: "top 85%",
          toggleActions: "play none none reverse",
          once: true
        }
      }
    );

    // Circles appearing animation with stagger (after impact cards)
    gsap.fromTo(circles,
      {
        scale: 0,
        opacity: 0,
        rotation: 180
      },
      {
        scale: 1,
        opacity: 1,
        rotation: 0,
        duration: 1.5,
        ease: "back.out(1.7)",
        stagger: 0.3,
        delay: 0.8, // Start after impact cards have animated
        scrollTrigger: {
          trigger: impactCards[0],
          start: "top 85%",
          toggleActions: "play none none reverse",
          once: true
        }
      }
    );

    // Mouse parallax effect for circles - reacts to entire impact section
    if (impactSection) {
      impactSection.addEventListener('mousemove', (e: Event) => {
        const mouseEvent = e as MouseEvent;
        const rect = impactSection.getBoundingClientRect();
        const x = mouseEvent.clientX - rect.left;
        const y = mouseEvent.clientY - rect.top;
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        const deltaX = (x - centerX) / centerX;
        const deltaY = (y - centerY) / centerY;

        // Different parallax intensities for each circle
        gsap.to('.circle-1', {
          x: deltaX * 20,
          y: deltaY * 15,
          duration: 0.3,
          ease: "power2.out"
        });

        gsap.to('.circle-2', {
          x: deltaX * -15,
          y: deltaY * 25,
          duration: 0.4,
          ease: "power2.out"
        });

        gsap.to('.circle-3', {
          x: deltaX * 25,
          y: deltaY * -20,
          duration: 0.5,
          ease: "power2.out"
        });
      });

      // Reset circles position when mouse leaves the impact section
      impactSection.addEventListener('mouseleave', () => {
        gsap.to('.circle', {
          x: 0,
          y: 0,
          duration: 2,
          ease: "power2.inOut"
        });
      });
    }
  });
</script>
